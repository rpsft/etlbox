include:
  # Release version in current branch
  - .version.yml

variables:
  CI_DEBUG_SERVICES: "true"
  # Enable service network
  FF_NETWORK_PER_BUILD: "true"

  NUPKG_FOLDER: '.packages'

.default_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9].*/
      variables:
        PACKAGE_VERSION: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop")
      variables:
        PACKAGE_VERSION: "${PACKAGE_RELEASE}-${CI_COMMIT_BRANCH}.${CI_PIPELINE_IID}"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^release\/[a-zA-Z0-9]+.*/
      variables:
        PACKAGE_VERSION: "${PACKAGE_RELEASE}-rc.${CI_PIPELINE_IID}"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PACKAGE_VERSION == ""
      variables: 
        PACKAGE_VERSION: "${PACKAGE_RELEASE}-merge.${CI_PIPELINE_IID}"
    - if: $CI_PIPELINE_SOURCE == "push" && $PACKAGE_VERSION == ""
      variables: 
        # Package version "by default", from .version.yml and added current pipeline no
        # (when pipeline is started on a tag, the tag name provides version number)
        PACKAGE_VERSION: "${PACKAGE_RELEASE}${PACKAGE_POSTFIX}.${CI_PIPELINE_IID}"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never

stages:
  - build
  - test
  - deploy

build_job:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - echo "Building version $PACKAGE_VERSION"
    - dotnet build ETLBox/ --packages .nuget/packages/ -c Release -p:Version=$PACKAGE_VERSION
    - dotnet pack --no-build -c Release -p:Version=$PACKAGE_VERSION -o $NUPKG_FOLDER --include-symbols --include-source
  cache:
    key: dotnet-packages-cache
    paths:
      - .nuget/packages/
      - tools/
    unprotect: true
  artifacts:
    expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
    paths:
      - "$NUPKG_FOLDER/"
  rules:
    - !reference [.default_rules, rules]

test_job:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:6.0
  services:
    - name: mysql/mysql-server
      alias: localmysql
    - name: postgres
      alias: localpostgres
    - name: mcr.microsoft.com/azure-sql-edge
      alias: localmssql
    - name: clickhouse/clickhouse-server
      alias: localclickhouse
  variables:
    # MySQL image customization
    MYSQL_ROOT_HOST: '%'
    MYSQL_ROOT_PASSWORD: 'etlboxpassword'
    # MYSQL_USER: , MYSQL_PASSWORD

    # Postgres image customization
    POSTGRES_PASSWORD: 'etlboxpassword'

    # MS SQL image customization
    ACCEPT_EULA: 'Y'
    SA_PASSWORD: 'YourStrong@Passw0rd'
    MSSQL_PID: 'Developer'
    # CLICKHOUSE image customization
    CLICKHOUSE_USER: clickhouse
    CLICKHOUSE_PASSWORD: Qwe123456
    CLICKHOUSE_MAX_CONNECTIONS: 100
  before_script:
    - pushd test
    - pwsh ./Set-Configuration.ps1 gitlab-ci
    - popd
    - dotnet tool install dotnet-reportgenerator-globaltool --tool-path .tools || true
    - dotnet build --packages .nuget/packages/ -c Release -p:Version=$PACKAGE_VERSION
  script:
    - >
      dotnet test --no-build --configuration=Release --filter="Category!=Performance" --logger="console;verbosity=detailed"
      --logger="junit;LogFilePath=../artifacts/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
      --collect="XPlat Code Coverage"
  after_script:
    - .tools/reportgenerator "-reports:./**/*.cobertura.xml" "-targetdir:.coverage" -reportTypes:TextSummary
    - cat .coverage/Summary.txt
    - echo 'End Summary'
  coverage: /Line coverage:[\s\S].+%/
  cache:
    key: dotnet-packages-cache
    paths:
      - .nuget/packages/
      - tools/
    unprotect: true
  rules:
    - !reference [.default_rules, rules]
  artifacts:
    when: always
    paths:
      - ./**/*test-result.xml
    reports:
      junit:
        - ./**/*test-result.xml
      coverage_report:
        coverage_format: cobertura
        path: ./**/coverage.cobertura.xml

publish:internal:
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - echo "Publishing version $PACKAGE_VERSION internally to $NUGET_SOURCE"
    - dotnet nuget push "$NUPKG_FOLDER/*.nupkg" --source $NUGET_SOURCE --api-key $NUGET_API_KEY
  rules:
    - !reference [.default_rules, rules]
  needs:
    - build_job
    - test_job

publish:nuget-org:
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - echo "Publishing version $PACKAGE_VERSION to nuget.org..."
    - dotnet nuget push "$NUPKG_FOLDER/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key $NUGET_ORG_API_KEY
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && ( $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/ || $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-beta.*$/ )
      when: manual
  needs:
    - build_job
    - test_job
