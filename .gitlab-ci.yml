include:
  # Release version in current branch
  - .version.yml

variables:
  # Opt out of telemetry (turbo and others), see https://consoledonottrack.com/
  DO_NOT_TRACK: 1
  # Enable debug services
  CI_DEBUG_SERVICES: "true"
  # Enable service network
  FF_NETWORK_PER_BUILD: "true"
  # Nupkg folder
  NUPKG_FOLDER: ".packages"
  NUGET_SOURCE: https://nuget.rapidsoft.ru/nuget/Rapidsoft-Nuget/v3/index.json
  NUGETORG_SOURCE: https://api.nuget.org/v3/index.json
  # All console out of dotnet should be in English
  #LANG: C
  #LCID: 1033
  # Disable dotnet first time experience
  DOTNET_NOLOGO: true
  # Disable Husky in dotnet tools restore
  HUSKY: 0

workflow:
  rules:
    # Avoid duplicate pipelines in merges
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        PACKAGE_VERSION: "${PACKAGE_RELEASE}-merge.${CI_MERGE_REQUEST_IID}.${CI_PIPELINE_IID}"
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop")
      variables:
        PACKAGE_VERSION: "${PACKAGE_RELEASE}"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^release\/[a-zA-Z0-9]+.*/
      variables:
        PACKAGE_VERSION: "${PACKAGE_RELEASE}-rc.${CI_PIPELINE_IID}"
    - if: $CI_PIPELINE_SOURCE == "web" || ($CI_PIPELINE_SOURCE == "push" && $PACKAGE_VERSION == null)
      variables:
        # Package version "by default", from .version.yml and added current pipeline no
        # (when pipeline is started on a tag, the tag name provides version number)
        PACKAGE_VERSION: "${PACKAGE_RELEASE}${PACKAGE_POSTFIX}.${CI_PIPELINE_IID}"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9].*/
      when: never

stages:
  - build
  - test
  - deploy

version_bump_job:
  stage: .pre
  image: mcr.microsoft.com/dotnet/sdk:6.0
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop")
  script:
    - pwsh ./bump-version-env.ps1 $CI_COMMIT_BRANCH
  artifacts: 
    reports: 
      dotenv: .gitlab-ci.env

build_job:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - echo "Building version $PACKAGE_VERSION"
    - dotnet build --packages .nuget/packages/ -c Release -p:Version=$PACKAGE_VERSION
    - dotnet pack --no-build -c Release -p:Version=$PACKAGE_VERSION -o $NUPKG_FOLDER --include-symbols --include-source
  cache:
    key: dotnet-packages-cache
    paths:
      - .nuget/packages/
      - .tools/
    unprotect: true
  artifacts:
    expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
    paths:
      - "$NUPKG_FOLDER/"

test_job:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:6.0
  services:
    - name: mysql/mysql-server
      alias: localmysql
    - name: postgres
      alias: localpostgres
    - name: mcr.microsoft.com/azure-sql-edge
      alias: localmssql
    - name: clickhouse/clickhouse-server
      alias: localclickhouse
    - name: krisgeus/docker-kafka
      alias: kafka
    - name: docker:24.0.5-dind
      alias: docker
      command: [ "dockerd", "--tls=false", "--host=tcp://0.0.0.0:2375", "--host=unix:///var/run/docker.sock" ]
  variables:
    DOCKER_HOST: tcp://docker:2375
    # MySQL image customization
    MYSQL_ROOT_HOST: '%'
    MYSQL_ROOT_PASSWORD: 'etlboxpassword'
    # MYSQL_USER: , MYSQL_PASSWORD

    # Postgres image customization
    POSTGRES_PASSWORD: 'etlboxpassword'

    # MS SQL image customization
    ACCEPT_EULA: 'Y'
    SA_PASSWORD: 'YourStrong@Passw0rd'
    MSSQL_PID: 'Developer'
    # CLICKHOUSE image customization
    CLICKHOUSE_USER: clickhouse
    CLICKHOUSE_PASSWORD: Qwe123456
    CLICKHOUSE_MAX_CONNECTIONS: 100
    # KAFKA customization
    ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,INTERNAL://localhost:9093'
    LISTENERS: 'PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093'
    SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT'
    INTER_BROKER: 'INTERNAL'
    KAFKA_CREATE_TOPICS: 'cc-event:36:1'

  before_script:
    - pushd test
    - pwsh ./Set-Configuration.ps1 gitlab-ci
    - popd
    - dotnet tool install dotnet-reportgenerator-globaltool --tool-path .tools || true
    - dotnet build --packages .nuget/packages/ -c Release -p:Version=$PACKAGE_VERSION
  script:
    - >
      dotnet test --no-build --configuration=Release --filter="Category!=Performance" --logger="console;verbosity=detailed"
      --logger="junit;LogFilePath=../artifacts/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
      --collect="XPlat Code Coverage"
  after_script:
    - .tools/reportgenerator "-reports:./**/*.cobertura.xml" "-targetdir:.coverage" -reportTypes:TextSummary
    - cat .coverage/Summary.txt
    - echo 'End Summary'
  coverage: /Line coverage:[\s\S].+%/
  cache:
    key: dotnet-packages-cache
    paths:
      - .nuget/packages/
      - .tools/
    unprotect: true
  artifacts:
    when: always
    paths:
      - ./**/*test-result.xml
    reports:
      junit:
        - ./**/*test-result.xml
      coverage_report:
        coverage_format: cobertura
        path: ./**/coverage.cobertura.xml

commit_release:
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:6.0
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop")
  script:
    - git config user.email "noreply@rapidsoft.ru"
    - git config user.name "Gitlab Runner"
    - echo "Source branch ${SOURCE_BRANCH}"
    - git remote set-url origin  "https://$CI_PROJECT_NAME:$CI_PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git fetch --depth=1000 --tags --prune origin $SOURCE_BRANCH
    - git switch $SOURCE_BRANCH
    - pwsh ./bump-version-write.ps1
    - echo "Pushing version changes to GIT"
    - git add .version.yml
    - |
      if git diff-index --quiet HEAD --; then
        echo "No changes to commit"
      else
        git commit --no-verify -m "Publish packages, version bump"
        git tag -a "v${PACKAGE_RELEASE}" -m "Release version ${PACKAGE_RELEASE}"
      fi
    - git push --follow-tags origin $SOURCE_BRANCH
  needs:
    - build_job
    - test_job
    
publish:internal:
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - echo "Publishing version $PACKAGE_VERSION internally to $NUGET_SOURCE"
    - dotnet nuget push "$NUPKG_FOLDER/*.nupkg" --source $NUGET_SOURCE --api-key $NUGET_API_KEY
  needs:
    - build_job
    - test_job

publish:nuget-org:
  interruptible: true
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - echo "Publishing version $PACKAGE_VERSION to nuget.org..."
    - dotnet nuget push "$NUPKG_FOLDER/*.nupkg" --source $NUGETORG_SOURCE --api-key $NUGET_ORG_API_KEY
  rules:
    - if: $SOURCE_BRANCH == "master"
      when: manual
  needs:
    - build_job
    - test_job
