using System.Data;
using ALE.ETLBox;
using ALE.ETLBox.ConnectionManager;
using ALE.ETLBox.ControlFlow;
using Microsoft.Data.SqlClient;
using TestConnectionManager.src.Fixtures;
using TestShared.Attributes;

namespace TestConnectionManager.src.ConnectionManager
{
    public class SqlConnectionManagerLeaveOpenTests : ConnectionManagerTestBase
    {
        public SqlConnectionManagerLeaveOpenTests(ConnectionManagerFixture fixture)
            : base(fixture) { }

        private static int? GetOpenConnections(string connectionString)
        {
            var conString = new SqlConnectionString(connectionString);
            var master = new SqlConnectionManager(conString.CloneWithMasterDbName());
            var dbName = conString.Builder.InitialCatalog;
            var openConnections = new SqlTask(
                "Count open connections",
                $@"SELECT COUNT(dbid) as NumberOfConnections FROM sys.sysprocesses
                    WHERE dbid > 0 and DB_NAME(dbid) = '{dbName}'"
            )
            {
                ConnectionManager = master,
                DisableLogging = true
            }.ExecuteScalar<int>();
            return openConnections;
        }

        [Fact]
        public void TestLeaveConnectionOpen()
        {
            Assert.Equal(0, GetOpenConnections(ConnectionStringParameter));
            //Arrange
            var con = new SqlConnectionManager(ConnectionStringParameter) { LeaveOpen = true };

            //Act
            Assert.Equal(0, GetOpenConnections(ConnectionStringParameter) - 0);
            Assert.True(con.State == null);
            con.Open();
            Assert.True(con.State == ConnectionState.Open);
            Assert.Equal(1, GetOpenConnections(ConnectionStringParameter) - 0);
            con.Open();
            Assert.Equal(1, GetOpenConnections(ConnectionStringParameter) - 0);
            Assert.True(con.State == ConnectionState.Open);
            Assert.Equal(1, GetOpenConnections(ConnectionStringParameter) - 0);
            SqlConnection.ClearAllPools();

            //Assert
            Assert.Equal(1, GetOpenConnections(ConnectionStringParameter) - 0);
            con.Close();
            SqlConnection.ClearAllPools();
            Assert.Equal(0, GetOpenConnections(ConnectionStringParameter) - 0);
        }

        [Fact]
        public void TestLeaveConnectionOpenWithSqlTask()
        {
            //Arrange
            var initialConnections = GetOpenConnections(ConnectionStringParameter);
            var con = new SqlConnectionManager(ConnectionStringParameter) { LeaveOpen = true };

            //Act
            Assert.Equal(0, GetOpenConnections(ConnectionStringParameter) - initialConnections);
            Assert.True(con.State == null);
            SqlTask.ExecuteNonQuery(con, "Dummy", "SELECT 1");
            Assert.True(con.State == ConnectionState.Open);
            Assert.Equal(1, GetOpenConnections(ConnectionStringParameter) - initialConnections);
            SqlTask.ExecuteNonQuery(con, "Dummy", "SELECT 1");
            Assert.Equal(1, GetOpenConnections(ConnectionStringParameter) - initialConnections);
            Assert.True(con.State == ConnectionState.Open);
            Assert.Equal(1, GetOpenConnections(ConnectionStringParameter) - initialConnections);
            SqlConnection.ClearAllPools();

            //Assert
            Assert.Equal(1, GetOpenConnections(ConnectionStringParameter) - initialConnections);
            con.Close();
            SqlConnection.ClearAllPools();
            Assert.Equal(0, GetOpenConnections(ConnectionStringParameter) - initialConnections);
        }

        [MultiprocessorOnlyFact(
            Skip = "TODO: Fix ConnectionManager losing connections after Clone"
        )]
        public void TestLeaveConnectionOpenInParallel()
        {
            Assert.Equal(0, GetOpenConnections(ConnectionStringParameter));
            //Arrange
            var con = new SqlConnectionManager(ConnectionStringParameter)
            {
                LeaveOpen = true,
                MaxLoginAttempts = 1
            };

            //Act
            Assert.Throws<InvalidOperationException>(() =>
            {
                try
                {
                    Task t1 = Task.Factory.StartNew(
                        () => SqlTask.ExecuteNonQuery(con, "Dummy", "WAITFOR DELAY '0:00:01.000'")
                    );
                    Task t2 = Task.Factory.StartNew(
                        () => SqlTask.ExecuteNonQuery(con, "Dummy", "WAITFOR DELAY '0:00:01.000'")
                    );
                    t1.Start();
                    t2.Start();
                    Task.WaitAll(t1, t2);
                }
                catch (AggregateException e)
                {
                    if (e.InnerException != null)
                        throw e.InnerException;
                    throw;
                }
            });

            SqlConnection.ClearAllPools();
            con.Close();

            Assert.Equal(2, GetOpenConnections(ConnectionStringParameter));
        }

        [Fact]
        public void TestCloningIfAllowedConnection()
        {
            //Arrange
            var con = new SqlConnectionManager(ConnectionStringParameter) { LeaveOpen = true };

            //Act
            var cloneIfAllowed = con.CloneIfAllowed();
            var clone = con.Clone();

            //Assert
            Assert.Equal(cloneIfAllowed, con);
            Assert.NotEqual(clone, con);
        }
    }
}
