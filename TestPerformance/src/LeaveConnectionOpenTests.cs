using ALE.ETLBox;
using ALE.ETLBox.ConnectionManager;
using ALE.ETLBox.ControlFlow;
using ALE.ETLBox.DataFlow;
using ALE.ETLBox.Helper;
using ALE.ETLBox.Logging;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Xunit;

namespace ALE.ETLBoxTests.Performance
{
    [Collection("Performance")]
    public class LeaveConnectionOpenTests
    {
        public string ConnectionStringParameter => Config.SqlConnection.RawConnectionString("Performance");


        public LeaveConnectionOpenTests(PerformanceDatabaseFixture dbFixture)
        {

        }

        [Theory]
        [InlineData(1000,0.10)]
        public void TestLeaveOpenOnConnMan(int runs, double deviation)
        {
            //Arrange
            SqlConnectionManager conNormal = new SqlConnectionManager(ConnectionStringParameter);
            SqlConnectionManager conLeaveOpen = new SqlConnectionManager(ConnectionStringParameter)
            {
                LeaveOpen = true
            };

            //Act
            var timeNormal = BigDataHelper.LogExecutionTime("Connection is cloned",
                () =>
                {
                    for (int i = 0; i < runs; i++)
                        new SqlTask("Dummy", "WAITFOR DELAY '0:00:00.010'")
                        {
                            ConnectionManager = conNormal,
                            DisableLogging = true
                        }
                        .ExecuteNonQuery();
                });

            var timeLeftOpen = BigDataHelper.LogExecutionTime("Connection is left open",
                () =>
                {
                    for (int i = 0; i < runs; i++)
                        new SqlTask("Dummy", "WAITFOR DELAY '0:00:00.010'")
                        {
                            ConnectionManager = conLeaveOpen,
                            DisableLogging = true
                        }
                        .ExecuteNonQuery();
                });

            //Assert
            Assert.True(timeLeftOpen < timeNormal);
            Assert.True(timeLeftOpen.TotalMilliseconds * (deviation + 1) > timeNormal.TotalMilliseconds);

        }
    }
}
